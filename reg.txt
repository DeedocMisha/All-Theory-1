<template>
  <div style="margin-left: -30px; width: 1400px" class="border rounded p-3">
    <form @submit.prevent="register">
      <div class="form-group">
        <label for="username">Логин:</label>
        <input
          v-model="username"
          type="text"
          id="username"
          class="form-control"
          placeholder="Логин…"
          autocomplete="username"
        />
      </div>

      <div class="form-group">
        <label for="email">Электронная почта:</label>
        <input
          v-model="email"
          type="email"
          id="email"
          class="form-control"
          placeholder="Email…"
          autocomplete="email"
        />
      </div>

      <div class="form-group">
        <label for="phone">Номер телефона:</label>
        <input
          v-model="phone"
          type="text"
          id="phone"
          class="form-control"
          placeholder="+7 (921) 123 45 67"
          autocomplete="tel"
        />
      </div>

      <div class="form-group">
        <label for="customerOrExecutor">Вы заказчик или исполнитель?</label>
        <select
          style="position: absolute; left: 400px"
          v-model="customerOrExecutor"
          id="customerOrExecutor"
          class="form-control"
          autocomplete="off"
        >
          <option value="customer">Заказчик</option>
          <option value="executor">Исполнитель</option>
        </select>
      </div>

      <div class="form-group">
        <label for="password">Пароль: </label>
        <input
          v-model="password"
          type="password"
          id="password"
          class="form-control"
          placeholder="Пароль…"
          autocomplete="new-password"
        />
      </div>

      <div class="form-group">
        <label for="repeatPassword">Повторите пароль:</label>
        <input
          v-model="repeatPassword"
          type="password"
          id="repeatPassword"
          class="form-control"
          placeholder="Повторите пароль…"
          autocomplete="new-password"
        />
      </div>
      <br />
      <button type="submit" class="btn btn-primary">Регистрация</button>

      <p class="mt-3">
        Уже есть аккаунт?
        <router-link style="color: blue" to="/signin">Вход</router-link>
      </p>
    </form>
  </div>
</template>

<style>
* {
  margin-top: 20px;
  margin-left: 30px;
}
label {
  margin-top: -20px;
  margin-left: -30px;
}
input {
  position: absolute;
  left: 400px;
}
</style>

<script>
import axios from "axios"; // Импортируйте axios

export default {
  name: "SignUp",
  data() {
    return {
      username: "",
      email: "", // Добавлено поле email
      password: "",
      repeatPassword: "",
      phone: "",
      customerOrExecutor: "",
      customerOrExecutorOptions: [
        { text: "Выберите...", value: "", disabled: true, selected: true },
        { text: "Заказчик", value: "customer" },
        { text: "Исполнитель", value: "executor" },
      ],
    };
  },
  methods: {
    register(event) {
      event.preventDefault();

      if (this.password !== this.repeatPassword) {
        alert("Пароли не совпадают");
        return;
      }

      axios
        .post(`http://127.0.0.1:8000/auth/users/`, {
          username: this.username,
          email: this.email,
          password: this.password,
          phone: this.phone,
          customerOrExecutor: this.customerOrExecutor,
        })
        .then((response) => {
          console.log("Регистрация успешна:", response.data);
          this.$router.push("/");
        })
        .catch((err) => {
          console.error("Ошибка при регистрации:", err.response.data);
          alert("Ошибка: " + err.response.data.detail);
        });
    },
  },
};
</script>



auth;
USE auth;
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL,
    customerOrExecutor VARCHAR(255) NOT NULL
);

SELECT * FROM users;

CREATE TABLE login (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
);
     INSERT INTO login (username, password) VALUES ('hello', '2121');
     



from fastapi import FastAPI, Depends, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from database import Base, engine, SessionLocal
from models import User
import uvicorn
import logging

# Настройка логирования
logging.basicConfig(level=logging.INFO)

# Создание всей схемы (если необходимо для других таблиц)
Base.metadata.create_all(bind=engine)

app = FastAPI()

origins = [
    "http://localhost:5173",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# Pydantic схема для валидации запроса пользователя
class UserSchema(BaseModel):
    username: str
    password: str
    email: EmailStr
    phone: str
    customerOrExecutor: str


# Pydantic схема для ответа
class UserResponse(BaseModel):
    message: str
    user_id: int

    class Config:
        from_attributes = True


@app.post("/auth/users/", response_model=UserResponse)
async def create_user(user: UserSchema, db: Session = Depends(get_db)):
    logging.info(f"Получены данные пользователя: {user}")
    existing_user = db.query(User).filter((User.username == user.username) | (User.email == user.email)).first()

    if existing_user:
        logging.warning("Имя пользователя или email уже зарегистрированы.")
        raise HTTPException(status_code=400, detail="Имя пользователя или email уже зарегистрированы.")

    hashed_password = pwd_context.hash(user.password)
    new_user = User(
        username=user.username,
        email=user.email,
        password=hashed_password,  # Применяем хеширование к паролю
        phone=user.phone,
        customerOrExecutor=user.customerOrExecutor
    )

    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    logging.info(f"Пользователь создан с id: {new_user.id}")
    return JSONResponse(content={"message": "Пользователь создан", "user_id": new_user.id})


if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)









from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from database import Base



class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    password = Column(String)
    phone = Column(String)
    customerOrExecutor = Column(String)







from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Конфигурация параметров подключения к базе данных MySQL
link_name_container_db_mysql = "localhost"
link_name_db_mysql_dbname = "auth"
link_name_db_mysql_port = "3307"
link_name_db_mysql_user = "root"
link_name_db_mysql_password = "passw"

SQLALCHEMY_DATABASE_URL = f"mysql+mysqlconnector://{link_name_db_mysql_user}:{link_name_db_mysql_password}@{link_name_container_db_mysql}:{link_name_db_mysql_port}/{link_name_db_mysql_dbname}"

# Создание двигателя SQLAlchemy
engine = create_engine(SQLALCHEMY_DATABASE_URL)

# Создание базового класса для декларативного стиля
Base = declarative_base()

# Создание фабрики сессий
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
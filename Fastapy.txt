https://fastapi.tiangolo.com/ru/learn/

[12.08.2024 20:39:43] Utopia AI: Конечно! Давайте разберем ваш код построчно, чтобы понять, что делает каждая строка.

### Импорт необходимых модулей
```python
from fastapi import FastAPI, Depends, HTTPException, status
# Импортируем основные модули FastAPI для создания приложения и обработки запросов.

from fastapi.responses import JSONResponse
# Импортируем модуль для формирования HTTP ответа в формате JSON.

from fastapi.middleware.cors import CORSMiddleware
# Импортируем модуль для настройки CORS (Cross-Origin Resource Sharing).

from pydantic import BaseModel
# Импортируем BaseModel из Pydantic для создания моделей данных и их валидации.

from sqlalchemy.orm import Session
# Импортируем класс Session из SQLAlchemy для работы с сессиями базы данных.

from database import Base, engine, SessionLocal
# Импортируем базовый класс модели, движок и функцию создания локальной сессии.

from models import Page
# Импортируем модель данных Page, которая определяет структуру таблицы в базе данных.

import uvicorn
# Импортируем uvicorn для запуска ASGI сервера.

import logging
# Импортируем логирование для записи событий и ошибок.
```

### Инициализация логирования
```python
logging.basicConfig(level=logging.INFO)
# Настраиваем базовый уровень логирования на INFO для отображения информации об исполнении программы.
```

### Создание всех схем базы данных
```python
Base.metadata.create_all(bind=engine)
# Создаем все таблицы, описанные в моделях (на базе Base), с использованием движка базы данных (engine).
```

### Инициализация FastAPI приложения
```python
app = FastAPI()
# Инициализируем объект приложения FastAPI.
```

### Настройка CORS
```python
origins = [
    "http://localhost:5173",
    # Устанавливаем список доверенных доменов для CORS запросов.
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
    # Добавляем промежуточный слой (middleware) для обработки CORS запросов с заданными параметрами.
)
```

### Шифрование паролей
```python
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
# Создаем объект CryptContext для шифрования паролей с использованием алгоритма bcrypt.
```

### Функция получения сессии базы данных
```python
def get_db():
    db = SessionLocal()
    try:
        yield db
        # Создаем и возвращаем сессию базы данных для каждого запроса.
    finally:
        db.close()
        # Закрываем сессию после завершения работы.
```

### Определение Pydantic схем
```python
class PageSchema(BaseModel):
    title: str
    content: str
    # Определяем схему данных для получения и валидации запроса на создание или обновление страницы.

    class Config:
        orm_mode = True
        # Включаем режим ORM для автоматической конверсии из модели ORM в схему Pydantic.

class PageResponse(BaseModel):
    id: int
    title: str
    content: str
    # Определяем схему данных для возвращения информации о странице в ответе.

    class Config:
        orm_mode = True
        # Включаем режим ORM для конверсии из модели ORM в схему Pydantic.
```

### Эндпоинты API

#### Получение всех страниц
```python
@app.get("/pages/", response_model=list[PageResponse])
async def get_pages(db: Session = Depends(get_db)):
    pages = db.query(Page).all()
    return pages
    # Асинхронный обработчик запроса GET /pages/ для получения всех страниц из базы данных.
    # Использует сессию базы данных и возвращает список всех страниц.
```

#### Создание новой страницы
```python
@app.post("/pages/", response_model=PageResponse, status_code=status.HTTP_201_CREATED)
async def create_page(page: PageSchema, db: Session = Depends(get_db)):
    new_page = Page(title=page.title, content=page.content)
    # Создаем объект Page на основе данных, полученных из запроса.

    db.add(new_page)
    db.commit()
    db.refresh(new_page)
    # Добавляем новую страницу в базу данных, сохраняем изменения и обновляем объект из базы данных.

    return new_page
    # Возвращаем созданную страницу как ответ.
```

#### Обновление существующей страницы
```python
@app.put("/pages/{id}", response_model=PageResponse)
async def update_page(id: int, page: PageSchema, db: Session = Depends(get_db)):
    existing_page = db.query(Page).filter(Page.id == id).first()
    if not existing_page:
        raise HTTPException(status_code=404, detail="Page not found")
        # Ищем страницу с данным идентификатором в базе данных. Если не найдено, выбрасываем 404 ошибку.

    existing_page.title = page.title
    existing_page.content = page.content
    # Обновляем заголовок и содержание страницы.

    db.commit()
    db.refresh(existing_page)
    # Сохраняем изменения и обновляем объект из базы данных.

    return existing_page
    # Возвращаем обновленную страницу как ответ.
```

#### Удаление страницы
```python
@app.delete("/pages/{id}", response_model=PageResponse)
async def delete_page(id: int, db: Session = Depends(get_db)):
    page = db.query(Page).filter(Page.id == id).first()
    if not page:
        raise HTTPException(status_code=404, detail="Page not found")
        # Ищем страницу с данным идентификатором в базе данных. Если не найдено, выбрасываем 404 ошибку.

    db.delete(page)
    db.commit()
    # Удаляем страницу из базы данных и сохраняем изменения.

    return page
    # Возвращаем удаленную страницу как ответ.
```

### Запуск приложения
```python
if __name__ == "__main__":
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
    # Запускаем приложение с помощью uvicorn. Привязываем его к указанному адресу и порту и включаем автоматическую перезагрузку при изменениях кода.
```

Этот подробный разбор каждой строки кода позволяет понять, как создано FastAPI приложение для работы с данными страниц из базы данных MySQL.
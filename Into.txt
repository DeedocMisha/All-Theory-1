from fastapi import FastAPI, Depends, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
from fastapi import status
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from database import Base, engine, SessionLocal
from models import User  # Убедитесь, что импортируем модель правильно
import uvicorn
import logging

logging.basicConfig(level=logging.INFO)

# Создание всех схем в базе данных
Base.metadata.create_all(bind=engine)

app = FastAPI()

origins = [
    "http://localhost:5173",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class UserSchema(BaseModel):
    username: str
    password: str
    email: EmailStr
    phone: str = None  # Поле phone не обязательно для валидации
    customerOrExecutor: str

class Login(BaseModel):
    username: str
    password: str

class UserResponse(BaseModel):
    message: str
    user_id: int

    class Config:
        from_attributes = True

@app.post("/auth/login/")
async def login(credentials: Login):
    if credentials.username == "hello" and credentials.password == "2121":
        return {"token": "example_token"}
    else:
        raise HTTPException(status_code=400, detail="Invalid username or password")


@app.post("/auth/users/", response_model=UserResponse)
async def create_user(user: UserSchema, db: Session = Depends(get_db)):
    logging.info(f"Received user data: {user}")
    existing_user = db.query(User).filter((User.username == user.username) | (User.email == user.email)).first()

    if existing_user:
        logging.warning("Username or email already registered.")
        raise HTTPException(status_code=400, detail="Username or email already registered.")

    hashed_password = pwd_context.hash(user.password)
    new_user = User(
        username=user.username,
        email=user.email,
        password=hashed_password,
        phone=user.phone,
        customerOrExecutor=user.customerOrExecutor
    )

    db.add(new_user)
    db.commit()
    db.refresh(new_user)

    logging.info(f"Created user with id: {new_user.id}")
    return JSONResponse(content={"message": "User created", "user_id": new_user.id})

if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)







from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from database import Base



class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    password = Column(String)
    phone = Column(String)
    customerOrExecutor = Column(String)

class Login(Base):
    __tablename__ = "login"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    password = Column(String)







from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# Конфигурация параметров подключения к базе данных MySQL
link_name_container_db_mysql = "localhost"
link_name_db_mysql_dbname = "auth"
link_name_db_mysql_port = "3307"
link_name_db_mysql_user = "root"
link_name_db_mysql_password = "passw"

SQLALCHEMY_DATABASE_URL = f"mysql+mysqlconnector://{link_name_db_mysql_user}:{link_name_db_mysql_password}@{link_name_container_db_mysql}:{link_name_db_mysql_port}/{link_name_db_mysql_dbname}"

# Создание двигателя SQLAlchemy
engine = create_engine(SQLALCHEMY_DATABASE_URL)

# Создание базового класса для декларативного стиля
Base = declarative_base()

# Создание фабрики сессий
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)









<template>
  <div class="login-container border rounded p-3">
    <form @submit.prevent="login">
      <div class="form-group">
        <label for="username">Логин:</label>
        <input
          v-model="username"
          type="text"
          id="username"
          name="username"
          class="form-control"
          placeholder="Логин…"
          autocomplete="username"
        />
      </div>

      <div class="form-group">
        <label for="password">Пароль: </label>
        <input
          v-model="password"
          type="password"
          id="password"
          name="password"
          class="form-control"
          placeholder="Пароль…"
          autocomplete="current-password"
        />
      </div>

      <div v-if="errorMessage" class="alert alert-danger mt-2">
        {{ errorMessage }}
      </div>

      <div v-if="successMessage" class="alert alert-success mt-2">
        {{ successMessage }}
      </div>

      <p class="mt-3">
        Нет аккаунта? <router-link to="/" style="color: blue">Назад</router-link>
      </p>

      <button type="submit" class="btn btn-primary" :disabled="isLoading">
        {{ isLoading ? "Загрузка…" : "Войти" }}
      </button>
    </form>
  </div>
</template>

<script>
import axios from "axios";

export default {
  data() {
    return {
      username: "",
      password: "",
      errorMessage: null,
      successMessage: null,
      isLoading: false,
    };
  },
  methods: {
    async login() {
      this.isLoading = true;
      try {
        const response = await axios.post("http://127.0.0.1:8000/auth/login/", {
          username: this.username,
          password: this.password,
        });

        this.successMessage = response.data.message;
        this.errorMessage = null;

        const token = response.data.token;
        if (token) {
          localStorage.setItem("authToken", token);
        }

        this.$router.push("/protected-route");

        this.username = "";
        this.password = "";
      } catch (error) {
        // Вывод полной ошибки для диагностики
        if (error.response && error.response.data) {
          this.errorMessage = error.response.data.detail || "Ошибка при авторизации";
        } else {
          this.errorMessage =
            "Не удалось связаться с сервером, пожалуйста, попробуйте позже.";
        }
        console.error("Error:", error.response ? error.response.data : error.message);
        this.successMessage = null;
      } finally {
        this.isLoading = false;
      }
    },
  },
};
</script>





auth;
USE auth;
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL,
    customerOrExecutor VARCHAR(255) NOT NULL
);

SELECT * FROM users;

DROP table login;

CREATE TABLE IF NOT EXISTS login (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);

     INSERT INTO login (username, password) VALUES ('hello', '2121');
SELECT * FROM login;
